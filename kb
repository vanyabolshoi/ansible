---
- name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Windows 11 –∏ –Ω–∞–ª–∏—á–∏–µ KB5066793 —á–µ—Ä–µ–∑ systeminfo
  hosts: all
  gather_facts: no
  vars:
    kb_id: "KB5066793"
    found_hosts: []
    not_found_hosts: []

  tasks:
    - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WinRM (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫)
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 5985
        timeout: 5
      delegate_to: localhost
      register: winrm_check
      ignore_errors: yes

    - name: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ—Å—Ç—ã
      meta: end_host
      when: winrm_check.failed is defined and winrm_check.failed

    - name: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
      ansible.windows.win_shell: systeminfo
      register: sysinfo_raw

    - name: –í—ã–≤–µ—Å—Ç–∏ –≤–µ—Ä—Å–∏—é Windows
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }} ‚Äî {{ sysinfo_raw.stdout | regex_search('OS Name:\\s*(.+)\\n', '\\1') | default('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') }}, OS Version: {{ sysinfo_raw.stdout | regex_search('OS Version:\\s*(.+)\\n', '\\1') | default('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') }}"

    - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ {{ kb_id }} (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Windows 11)
      ansible.windows.win_shell: |
        $kb = Get-HotFix -Id {{ kb_id }} -ErrorAction SilentlyContinue
        if ($kb) { Write-Output "FOUND" } else { Write-Output "NOT_FOUND" }
      register: kb_check
      when: sysinfo_raw.stdout is search('Windows 11')
      failed_when: false

    - name: –í—ã–≤–µ—Å—Ç–∏ IP –µ—Å–ª–∏ KB –Ω–∞–π–¥–µ–Ω
      ansible.builtin.debug:
        msg: "‚úÖ {{ inventory_hostname }} ‚Äî {{ kb_id }} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
      when:
        - sysinfo_raw.stdout is search('Windows 11')
        - kb_check.stdout is search('FOUND')

    - name: –î–æ–±–∞–≤–∏—Ç—å —Ö–æ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
      set_fact:
        found_hosts: "{{ found_hosts + [inventory_hostname] }}"
      when:
        - sysinfo_raw.stdout is search('Windows 11')
        - kb_check.stdout is search('FOUND')

    - name: –í—ã–≤–µ—Å—Ç–∏ IP –µ—Å–ª–∏ KB –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      ansible.builtin.debug:
        msg: "‚ùå {{ inventory_hostname }} ‚Äî {{ kb_id }} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
      when:
        - sysinfo_raw.stdout is search('Windows 11')
        - kb_check.stdout is search('NOT_FOUND')

    - name: –î–æ–±–∞–≤–∏—Ç—å —Ö–æ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
      set_fact:
        not_found_hosts: "{{ not_found_hosts + [inventory_hostname] }}"
      when:
        - sysinfo_raw.stdout is search('Windows 11')
        - kb_check.stdout is search('NOT_FOUND')

  # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ö–æ—Å—Ç–∞–º (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
  run_once: true
  tasks:
    - name: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç
      ansible.builtin.debug:
        msg: |
          üßæ –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ KB {{ kb_id }}:
          ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {{ hostvars | dict2items | selectattr('value.found_hosts', 'defined') | map(attribute='value.found_hosts') | flatten | unique | join(', ') | default('–Ω–µ—Ç') }}
          ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞: {{ hostvars | dict2items | selectattr('value.not_found_hosts', 'defined') | map(attribute='value.not_found_hosts') | flatten | unique | join(', ') | default('–Ω–µ—Ç') }}
